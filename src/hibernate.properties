hibernate.connection.driver_class=org.postgresql.Driver
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.connection.url=jdbc:postgresql://localhost:5432/fortesrh
hibernate.connection.username=postgres
hibernate.connection.password=1234

hibernate.jdbc.batch_size=20

## Configuracao do Pool ##
# Hibernate default: 1
hibernate.c3p0.min_size=5

#Hibernate default: 100
#hibernate.c3p0.max_size=100

# 1800 = 30min. Hibernate default: 0. The seconds a Connection can remain pooled but unused before being discarded. Zero means idle connections never expire.
hibernate.c3p0.timeout=1800

# Hibernate default: 1. Determines how many connections at a time c3p0 will try to acquire when the pool is exhausted.
hibernate.c3p0.acquire_increment=3

# 14 min. # Hibernate default: 0. If this is a number greater than 0, c3p0 will test all idle, pooled but unchecked-out connections, every this number of seconds.
hibernate.c3p0.idle_test_period=840

## Valores Default do Pool ##
#hibernate.c3p0.initial_pool_size=3						# C3P0 default: 3
#hibernate.c3p0.max_statements=0 						# Hibernate default: 0.  The size of c3p0's PreparedStatement cache. Zero means statement caching is turned off.
#hibernate.c3p0.property_cycle=300  					# C3P0 default: 300. Maximum time in seconds before user configuration constraints are enforced. c3p0 enforces configuration constraints
														# continually, and ignores this parameter. It is included for JDBC3 completeness.

#hibernate.c3p0.test_connection_on_checkout=false		#C3P0 default: false. Don't use it, this feature is very expensive. If set to true, an operation will be performed at every
														# connection checkout to verify that the connection is valid. A better choice is to verify connections periodically using
														# c3p0.idleConnectionTestPeriod.

#hibernate.c3p0.auto_commit_on_close=false  			# C3P0 default: false. The JDBC spec is unfortunately silent on what should happen to unresolved, pending transactions
														# on Connection close. C3P0's default policy is to rollback any uncommitted, pending work. (I think this is absolutely,
														# undeniably the right policy, but there is no consensus among JDBC driver vendors.) Setting autoCommitOnClose to true
														# causes uncommitted pending work to be committed, rather than rolled back on Connection close. [Note: Since the spec
														# is absurdly unclear on this question, application authors who wish to avoid bugs and inconsistent behavior should ensure
														# that all transactions are explicitly either committed or rolled-back before close is called.

#hibernate.c3p0.force_ignore_unresolved_transactions=f 	# Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.
														# This is a terrible setting, leave it alone unless absolutely necessary. It is here to work around broken databases / JDBC drivers
	                                                	# that do not properly support transactions, but that allow Connections' autoCommit flags to be set to false regardless.
                                      	             	# If you are using a database that supports transactions "partially" (this is oxymoronic, as the whole point of transactions is
                                      		            # to perform operations reliably and completely, but nevertheless, such databases exist), if you feel comfortable ignoring the
                          	            	            # fact that Connections with autoCommit == false may be in the middle of transactions and may hold locks and other resources,
             	                         	            # you may turn off c3p0's wise default behavior, which is to protect itself, as well as the usability and consistency of the database,
                                      		            # by either rolling back (default) or committing (see c3p0.autoCommitOnClose above) unresolved transactions.
	                                                   	# This should only be set to true when you are sure you are using a database that allows Connections' autoCommit flag to go to
                                                   	    # false, but that it offers no other meaningful support of transactions. Otherwise setting this to true is just a bad idea.

#hibernate.c3p0.num_helper_threads= 3 					# C3P0 default: 3. C3P0 is very asynchronous. Slow JDBC operations are generally performed by helper threads that don't hold contended locks.
			                          					# Spreading these operations over multiple threads can significantly improve performance by allowing multiple operations to be performed simultaneously.