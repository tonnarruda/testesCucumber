<?xml version="1.0" encoding="UTF-8"?>

<project name="cobertura.examples.basic" default="coverage" basedir=".">

	<description>
    Cobertura - http://cobertura.sourceforge.net/
    Copyright (C) 2003 jcoverage ltd.
    Copyright (C) 2005 Mark Doliner &lt;thekingant@users.sourceforge.net&gt;
    Copyright (C) 2006 Dan Godfrey
    Cobertura is licensed under the GNU General Public License
    Cobertura comes with ABSOLUTELY NO WARRANTY
    </description>

	<property file="build.properties" />

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

	<target name="init">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${instrumented.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
		<mkdir dir="${coverage.xml.dir}" />
		<mkdir dir="${coverage.summaryxml.dir}" />
		<mkdir dir="${coverage.html.dir}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes">
			<classpath refid="cobertura.classpath" />
		</javac>
	</target>

	<target name="instrument" depends="init,compile">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="cobertura.ser"/>
		<delete dir="${instrumented.dir}" />

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument todir="${instrumented.dir}">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${classes.dir}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test" depends="init,compile">
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
			<!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
			<classpath location="${instrumented.dir}" />
			<classpath location="${classes.dir}" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />
			<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
			<batchtest todir="${reports.xml.dir}" unless="testcase">
				<fileset dir="${src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>
	</target>

	<target name="coverage-check">
		<cobertura-check branchrate="34" totallinerate="100" />
	</target>

	<target name="coverage-report">
		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
	</target>

	<target name="summary-coverage-report">
		<!--
			Generate an summary XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.summaryxml.dir}" format="summaryXml" />
	</target>

	<target name="alternate-coverage-report">
		<!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
		<cobertura-report destdir="${coverage.html.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>

	<target name="clean" description="Remove all files created by the build/test process.">
		<delete dir="${classes.dir}" />
		<delete dir="${instrumented.dir}" />
		<delete dir="${reports.dir}" />
		<delete file="cobertura.log" />
		<delete file="cobertura.ser" />
	</target>

	<target name="coverage" depends="compile,instrument,test,coverage-report,summary-coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

		
		
	<!-- _____________________________________________Utilizado pelo jenkins tem que refatorar foi apenas copiado para dar continuidade na integracao continua  ___________________________________________________________________________ -->	
	
	<target name="emma-compile" depends="build">
		<delete dir="${project.dir}/emma" />
		<mkdir dir="${project.dir}/emma"/>
		<mkdir dir="${project.dir}/emma/classes"/>
		<mkdir dir="${project.dir}/emma/reports"/>
		<taskdef resource="emma_ant.properties" classpathref="project.classpath" />
		<emma verbosity="info">
			<instr instrpath="${build.dir}" destdir="${project.dir}/emma/classes" metadatafile="${project.dir}/emma/metadado.emma" merge="false" mode="copy">
				<filter excludes="*Test*" />
				<filter excludes="*Mock*" />
				<filter excludes="*Factory*" />
				<filter excludes="*Suite*" />
				<filter excludes="*BeanBasico*" />
			</instr>
		</emma>
	</target>
	
	<target name="emma-test" depends="emma-compile">
		<property name="allTests.class" value="com.fortes.rh.test.AllUnitTests" />

		<dirname file="build.xml" property="current.dir" />
		<junit haltonfailure="false" haltonerror="false" fork="true" dir="${current.dir}" maxmemory="512m">
			<classpath>
				<pathelement location="${project.dir}/emma/classes"/>
				<pathelement location="${project.dir}/emma/lib"/>
				<path refid="project.classpath" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<test name="${allTests.class}" />

			<jvmarg value="-javaagent:${jmockit.dir}" />
			<jvmarg value="-Demma.coverage.out.file=${project.dir}/emma/cobertura.emma" />
			<jvmarg value="-Demma.coverage.out.merge=false" />
		</junit>

		<emma>
			<report sourcepath="${src.dir}" >
				<fileset dir="${project.dir}/emma">
					<include name="*.emma" />
				</fileset>
				<!--html outfile="emma/reports/index.html" depth="method"/-->
				<xml outfile="emma/reports/cobertura.xml" />
			</report>
		</emma>
	</target>
	
	<target name="build">
		<mkdir dir="${build.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*/**" />
		</delete>

		<javac debug="on" encoding="UTF-8" srcdir="${src.dir}" destdir="${build.dir}" failonerror="true"
			source="1.5" target="1.5">
			<classpath refid="project.classpath" />
		</javac>
		<javac debug="on" encoding="UTF-8" srcdir="${srcTeste.dir}" destdir="${build.dir}" failonerror="true"
			source="1.5" target="1.5">
			<classpath refid="project.classpath" />
		</javac>

		<antcall target="resources"></antcall>
	</target>
	
	<target name="testMock" depends="build">
		<property name="allTests.class" value="com.fortes.rh.test.AllUnitTests" />

		<dirname file="build.xml" property="current.dir" />
		<junit haltonfailure="true" haltonerror="true" fork="true" dir="${current.dir}" maxmemory="512m">
			<jvmarg value="-javaagent:${jmockit.dir}" />
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<test name="${allTests.class}" />
		</junit>
	</target>
	
	<target name="recreate-bd-vazio">
		<exec executable="pg_dump"
			output="./bkpDBFortesRh.sql">
			<arg value="fortesrh" />
			<arg value="-U" />
			<arg value="postgres" />
		</exec>

		<sql driver="org.postgresql.Driver"
			url="jdbc:postgresql://localhost:5432/template1"
			userid="postgres"
			password="1234"
			classpath="${lib.dir}/postgresql-9.0-801.jdbc3.jar"
			autocommit="true">
			<transaction>
				drop database fortesrh;
				create database fortesrh with encoding = 'UTF-8';
			</transaction>
		</sql>
	</target>
	
	<target name="recreate-bd" depends="recreate-bd-vazio">
		<exec failonerror="true" executable="psql"
			input="${metadados.dir}/create.sql">
			<arg value="-U" />
			<arg value="postgres" />
			<arg value="fortesrh" />
		</exec>
		<exec failonerror="true" executable="psql"
			input="${metadados.dir}/create_data.sql">
			<arg value="-U" />
			<arg value="postgres" />
			<arg value="fortesrh" />
		</exec>
	</target>
	
	<target name="recreate-and-update-bd" depends="recreate-bd">
		<exec failonerror="true" executable="psql"
			input="${metadados.dir}/update_dev.sql">
			<arg value="-U" />
			<arg value="postgres" />
			<arg value="fortesrh" />
		</exec>
	</target>
	
	<!-- Utilizado pelo jenkins -->
	<target name="integrate-server" depends="recreate-and-update-bd, testMock, emma-test">
		<echo message="Integração concluída com sucesso." />
	</target>	
	
</project>
