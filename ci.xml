<?xml version="1.0" encoding="UTF-8" ?>
<project name="FortesRH" basedir="." default="integrate-server">

	<property file="ci.properties" />

	<property environment="env"/>

   	<path id="project.classpath">
		<pathelement location="${build.dir}" />
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
			<include name="backup/ant-apache-log4j.jar" />
			<exclude name="ant-junit.jar" />
		</fileset>
		<fileset dir="${project.dir}/extras">
			<include name="servlet-api.jar" />
		</fileset>
   	</path>

   	<path id="project.classpath.selenium">
		<fileset dir="./extras">
			<include name="*.jar" />
		</fileset>
   	</path>

	<path id="project.classpath.ireport">
		<pathelement location="${build.dir}" />
		<fileset dir="${jasperreports.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="resources">
		<copy todir="${build.dir}" includeEmptyDirs="no">
			<fileset dir="${src.dir}">
				<patternset>
					<include name="**/*.properties"/>
					<include name="**/*.xml"/>
					<include name="**/*.css"/>
					<include name="**/*.js"/>
					<include name="**/*.gif"/>
				</patternset>
			</fileset>
		</copy>

		<copy todir="${build.dir}" includeEmptyDirs="no">
			<fileset dir="${srcTeste.dir}">
				<patternset>
					<include name="**/*.xml"/>
				</patternset>
			</fileset>
		</copy>

	</target>


	<target name="recreate-bd-vazio">
        <!--
		<exec executable="pg_dump"
			output="./bkpDBFortesRh.sql">
			<arg value="fortesrh" />
			<arg value="-U" />
			<arg value="postgres" />
		</exec>
        -->

		<sql driver="org.postgresql.Driver"
			url="jdbc:postgresql://localhost:5432/template1"
			userid="postgres"
			password="${postgres.password}"
			classpath="${lib.dir}/postgresql-8.1-405.jdbc3.jar"
			autocommit="true">
			<transaction>
				drop database fortesrh;
				create database fortesrh with encoding = 'UTF-8';
			</transaction>
		</sql>
	</target>

	<target name="recreate-bd" depends="recreate-bd-vazio">
		<exec failonerror="true" executable="psql"
			input="${metadados.dir}/create.sql">
			<env key="PGPASSWORD" value="${postgres.password}" />
			<arg value="-U" />
			<arg value="postgres" />
			<arg value="fortesrh" />
		</exec>
		<exec failonerror="true" executable="psql"
			input="${metadados.dir}/create_data.sql">
			<env key="PGPASSWORD" value="${postgres.password}" />
			<arg value="-U" />
			<arg value="postgres" />
			<arg value="fortesrh" />
		</exec>
	</target>

	<target name="recreate-and-update-bd" depends="recreate-bd">
		<exec failonerror="true" executable="psql"
			input="${metadados.dir}/update_dev.sql">
			<env key="PGPASSWORD" value="${postgres.password}" />
			<arg value="-U" />
			<arg value="postgres" />
			<arg value="fortesrh" />
		</exec>
	</target>

	<target name="build" depends="recreate-and-update-bd">
		<mkdir dir="${build.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*/**" />
		</delete>

		<javac debug="on" encoding="UTF-8" srcdir="${src.dir}" destdir="${build.dir}" failonerror="true">
			<classpath refid="project.classpath" />
		</javac>
		<javac debug="on" encoding="UTF-8" srcdir="${srcTeste.dir}" destdir="${build.dir}" failonerror="true">
			<classpath refid="project.classpath" />
			<classpath refid="project.classpath.selenium" />
		</javac>

		<antcall target="resources"></antcall>
	</target>


	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

	<target name="instrument" depends="build">

        <delete dir="${instrumented.dir}" />
        <delete dir="${coverage.xml.dir}" />

		<mkdir dir="${instrumented.dir}" />
		<mkdir dir="${coverage.xml.dir}" />
		<cobertura-instrument datafile="${coverage.xml.dir}/cobertura.ser" todir="${instrumented.dir}">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${build.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test-coverage" depends="instrument">

		<property name="allTests.class" value="com.fortes.rh.test.AllUnitTests" />

		<dirname file="ci.xml" property="current.dir" />
		<junit haltonfailure="true" haltonerror="true"
			fork="true" dir="${current.dir}" maxmemory="512m"
			forkmode="once">
			<jvmarg value="-javaagent:${jmockit.dir}" />
            <jvmarg value="-Xms40m" />
            <jvmarg value="-Xmx512m" />
            <jvmarg value="-XX:MaxPermSize=512M" />
			<classpath>
				<path refid="project.classpath" />
				<pathelement path="${build.dir}" />
				<fileset dir="${cobertura.dir}">
					<include name="cobertura.jar" />
				</fileset>
				<pathelement path="${instrumented.dir}" />
			</classpath>
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${coverage.xml.dir}/cobertura.ser" />
			<sysproperty key="basedir" value="." />
			<formatter type="plain" usefile="false" />

            <test name="${allTests.class}" />

		</junit>
	</target>

	<target name="coverage" depends="test-coverage">
		<cobertura-report datafile="${coverage.xml.dir}/cobertura.ser" srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
	</target>

<!--
	<target name="emma-compile" depends="build">
		<delete dir="${project.dir}/emma" />
		<mkdir dir="${project.dir}/emma"/>
		<mkdir dir="${project.dir}/emma/classes"/>
		<mkdir dir="${project.dir}/emma/reports"/>

		<emma verbosity="verbose">
			<instr instrpath="${build.dir}" destdir="${project.dir}/emma/classes" metadatafile="${project.dir}/emma/metadado.emma" merge="false" mode="copy">
				<filter excludes="*Test*" />
				<filter excludes="*Mock*" />
				<filter excludes="*Factory*" />
				<filter excludes="*Suite*" />
				<filter excludes="*BeanBasico*" />
			</instr>
		</emma>
	</target>

	<target name="emma-test" depends="emma-compile">
		<property name="allTests.class" value="com.fortes.rh.test.AllUnitTests" />

		<dirname file="ci.xml" property="current.dir" />
		<junit haltonfailure="true" haltonerror="true" fork="true" dir="${current.dir}" maxmemory="512m" forkmode="once">
			<classpath>
				<pathelement location="${project.dir}/emma/classes"/>
				<pathelement location="${project.dir}/emma/lib"/>
				<path refid="project.classpath" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<test name="${allTests.class}" />

			<jvmarg value="-javaagent:${jmockit.dir}" />
			<jvmarg value="-Demma.coverage.out.file=${project.dir}/emma/cobertura.emma" />
			<jvmarg value="-Demma.coverage.out.merge=false" />
		</junit>

		<emma>
			<report sourcepath="${project.dir}" >
				<fileset dir="${project.dir}/emma">
					<include name="*.emma" />
				</fileset>
				<xml outfile="emma/reports/cobertura.xml" />
			</report>
		</emma>
	</target>
-->

	<target name="test" depends="build">
		<property name="allTests.class" value="com.fortes.rh.test.AllUnitTests" />

		<dirname file="ci.xml" property="current.dir" />
		<junit haltonfailure="true" haltonerror="true"
			fork="true" dir="${current.dir}" maxmemory="512m"
			forkmode="once">
			<jvmarg value="-javaagent:${jmockit.dir}" />
            <jvmarg value="-Xms40m" />
            <jvmarg value="-Xmx512m" />
            <jvmarg value="-XX:MaxPermSize=512M" />
			<classpath>
				<path refid="project.classpath" />
				<pathelement path="${build.dir}" />
			</classpath>
			<formatter type="plain" usefile="false" />

            <test name="${allTests.class}" />

		</junit>
	</target>

	<target name="integrate-server" depends="coverage">
		<echo message="Integração concluída com sucesso." />
	</target>

</project>

